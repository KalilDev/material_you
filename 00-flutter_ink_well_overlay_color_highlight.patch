diff --git a/packages/flutter/lib/src/material/ink_well.dart b/packages/flutter/lib/src/material/ink_well.dart
index 0f8786cb4e..bbb4d368a0 100644
--- a/packages/flutter/lib/src/material/ink_well.dart
+++ b/packages/flutter/lib/src/material/ink_well.dart
@@ -483,26 +483,20 @@ class InkResponse extends StatelessWidget {
   /// Defines the ink response focus, hover, and splash colors.
   ///
   /// This default null property can be used as an alternative to
-  /// [focusColor], [hoverColor], and [splashColor]. If non-null,
+  /// [focusColor], [hoverColor], and [highlightColor]. If non-null,
   /// it is resolved against one of [MaterialState.focused],
   /// [MaterialState.hovered], and [MaterialState.pressed]. It's
   /// convenient to use when the parent widget can pass along its own
   /// MaterialStateProperty value for the overlay color.
   ///
-  /// [MaterialState.pressed] triggers a ripple (an ink splash), per
-  /// the current Material Design spec. The [overlayColor] doesn't map
-  /// a state to [highlightColor] because a separate highlight is not
-  /// used by the current design guidelines.  See
-  /// https://material.io/design/interaction/states.html#pressed
-  ///
   /// If the overlay color is null or resolves to null, then [focusColor],
-  /// [hoverColor], [splashColor] and their defaults are used instead.
+  /// [hoverColor], [highlightColor] and their defaults are used instead.
   ///
   /// See also:
   ///
   ///  * The Material Design specification for overlay colors and how they
   ///    match a component's state:
-  ///    <https://material.io/design/interaction/states.html#anatomy>.
+  ///    <https://m3.material.io/foundations/interaction-states>.
   final MaterialStateProperty<Color?>? overlayColor;
 
   /// The splash color of the ink response. If this property is null then the
@@ -799,6 +793,7 @@ class _InkResponseState extends State<_InkResponseStateWidget>
   bool get wantKeepAlive => highlightsExist || (_splashes != null && _splashes!.isNotEmpty);
 
   Color getHighlightColorForType(_HighlightType type) {
+    const Set<MaterialState> pressed = <MaterialState>{MaterialState.focused};
     const Set<MaterialState> focused = <MaterialState>{MaterialState.focused};
     const Set<MaterialState> hovered = <MaterialState>{MaterialState.hovered};
 
@@ -807,7 +802,7 @@ class _InkResponseState extends State<_InkResponseStateWidget>
       // Material Design spec. A separate highlight is no longer used.
       // See https://material.io/design/interaction/states.html#pressed
       case _HighlightType.pressed:
-        return widget.highlightColor ?? Theme.of(context).highlightColor;
+        return widget.overlayColor?.resolve(pressed) ?? widget.highlightColor ?? Theme.of(context).highlightColor;
       case _HighlightType.focus:
         return widget.overlayColor?.resolve(focused) ?? widget.focusColor ?? Theme.of(context).focusColor;
       case _HighlightType.hover:
@@ -880,8 +875,7 @@ class _InkResponseState extends State<_InkResponseStateWidget>
     final MaterialInkController inkController = Material.of(context)!;
     final RenderBox referenceBox = context.findRenderObject()! as RenderBox;
     final Offset position = referenceBox.globalToLocal(globalPosition);
-    const Set<MaterialState> pressed = <MaterialState>{MaterialState.pressed};
-    final Color color =  widget.overlayColor?.resolve(pressed) ?? widget.splashColor ?? Theme.of(context).splashColor;
+    final Color color =  widget.splashColor ?? Theme.of(context).splashColor;
     final RectCallback? rectCallback = widget.containedInkWell ? widget.getRectCallback!(referenceBox) : null;
     final BorderRadius? borderRadius = widget.borderRadius;
     final ShapeBorder? customBorder = widget.customBorder;
@@ -1073,8 +1067,7 @@ class _InkResponseState extends State<_InkResponseStateWidget>
       _highlights[type]?.color = getHighlightColorForType(type);
     }
 
-    const Set<MaterialState> pressed = <MaterialState>{MaterialState.pressed};
-    _currentSplash?.color = widget.overlayColor?.resolve(pressed) ?? widget.splashColor ?? Theme.of(context).splashColor;
+    _currentSplash?.color = widget.splashColor ?? Theme.of(context).splashColor;
 
     final MouseCursor effectiveMouseCursor = MaterialStateProperty.resolveAs<MouseCursor>(
       widget.mouseCursor ?? MaterialStateMouseCursor.clickable,
